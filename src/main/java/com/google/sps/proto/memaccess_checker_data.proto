syntax = "proto3";

option java_outer_classname = "MemaccessCheckerDataProto";

package com.google.sps.proto;

// Allocation data for one tensor.  This is for the part of the tensor that lives
// on one tile, which is called a "buffer" in the compiler.
message TensorAllocation {
  string name = 1;  // For debugging.
  int32 tensor_label = 2;
  int32 base_address = 3;
  int32 size = 4;
}

// One table per tile.
message TensorTileAllocationTable {
  repeated TensorAllocation tensor_allocation = 1;
}

// One table per layer.
message TensorLayerAllocationTable {
  string layer = 1;
  repeated TensorTileAllocationTable tensor_tile_allocation = 2;
}

// The read and write fields list the unique labels for the buffers that an
// instruction reads or writes.
message Instruction {
  string name = 1;
  string layer = 2;
  int32 tag = 3;
  repeated bool mask = 4;  // One entry for each tile.
  // The following read and write fields are interpreted as either the base
  // address of the corresponding read / write or the tensor label, depending on
  // whether or the not the instructions have been processed to match the tensor
  // information.
  repeated int32 narrow_read = 5;
  repeated int32 narrow_write = 6;
  repeated int32 wide_read = 7;
  repeated int32 wide_write = 8;
}

message TraceEvent {
  enum AccessType {
    NARROW_READ = 0;
    NARROW_WRITE = 1;
    WIDE_READ = 2;
    WIDE_WRITE = 3;
  }
  AccessType access_type = 1;
  int32 instruction_tag = 2;
  int32 address = 3;
  int32 bytes = 4;
  int64 cycle = 5;
}

message MemaccessCheckerData {
  string name = 1;
  int32 num_tiles = 2;
  int32 narrow_memory_size_bytes = 3;
  int32 wide_memory_size_bytes = 4;
  bool instructions_contain_tensor_labels = 5;
  repeated TensorLayerAllocationTable tensor_layer_allocation_narrow = 6;
  repeated TensorLayerAllocationTable tensor_layer_allocation_wide = 7;
  repeated Instruction instructions = 8;
  repeated TraceEvent trace_events = 9;
}
